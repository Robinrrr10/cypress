Cypress
-------
-------

This test execution will directly happens in browser. There is no intermediate like driver or something as like selenium
It will run only in chrome

---


To install cypress use below command:
npm install cypress -save  //It will install cypress package

After installing it will show the command to open cypress window as like below. Use that command
node_modules\.bin\cypress open   //This will open cypress window
There we can find what are all the test available under integration.

Under cypress/integration add our test .js file for adding test
After adding it will show the same test in cypress window

describe is for adding test group
under describe, it is for adding test
Eg:
describe('Test group name', function(){
  it('Test name', function(){
		//Give content here
	}
}



Below is one of sample assertion:

expect(giveValueHere).to.equal(giveActualValueHere);

Eg:
expect(true).to.equal(true);




Below is to open the web page

cy.visit("GiveUrlHere")

Eg:
cy.visit("https://nellaicrafts.in/")




To find any text using contains use  below

cy.contains('Give text here').click()

Eg:
cy.contains('Our Products').click()



To get url:
cy.url()

To check verify endpoint

cy.url().should('include', '/endpoint')

Eg:
cy.url().should('include', '/shop')




To get element using class name:

cy.get('.classname')

Eg:
cy.get('.header-search-icon')



To get element using id:
cy.get('#woocommerce-product-search-field-3')



To click, we use element.click() as like below
Eg:
cy.contains('Our Products').click()
cy.get('.header-search-icon').click()


To type text, we use element.type('give here what wanted to type')
Eg:
cy.get('#woocommerce-product-search-field-3').type('shoe')

To verify typed one is showing or not. We can use like below
cy.get('#woocommerce-product-search-field-3').type('shoe').should('have.value', 'shoe')


To debug and go step and step, use below:
cy.pause()


Eg:

describe('Sample Tests', function(){     //describe is  used to create test group
  it('First Test to open the page', function(){ //it is used create test
    //expect(true).to.equal(true); // just a sample assertion
    cy.visit("https://nellaicrafts.in/") //To open the web page
    cy.pause() //To debug and go step by step by clicking
    cy.contains('Our Products').click() //Used to find the  element using text and then clicking
    cy.url().should('include', '/shop')  //To get current url and to verify the  endpoint
    cy.get('.header-search-icon').click() //To get element using class namd and then clicking
    cy.get('#woocommerce-product-search-field-3').type('shoe').should('have.value', 'shoe') //To get element usind id and type text and verifying whether it shows typed text or // NOTE:

  })
})















--------------


Cypress window:
-------------

cypress window will open after giving open command. It will be something like below

node_modules\.bin\cypress open



Whenever we save the test file, it will automatically run the test

We can see whether it is passing or failing
Pass will be in green
Fail will be in red


It will show every steps 
When clicking the steps we can see the screen during that action
It will show before and after in screen
It will also show where exactly the click action happens
It will also show the reload, redirect and new url calls under each steps
By clicking in step we can inpect the element and action details in consol logs
By adding cy.pause(), we can go step by step execution. This will helps for debugging
In top, it will show the total test pass/fail. it will also show the duration etc 


-----------------



Tutorial:
--------
--------

https://www.youtube.com/watch?v=yM38NmF-LC4&list=PLUDwpEzHYYLu4jKg-rNSKH3aJeBinlPXp&index=1



Tutorial 1: Introduction
----------------------
It is designed for modern web application front end testing
It is build using node js and comes with npm package
Only Javascript can be used to write scripts
90% of the coding can be done using inbuild command of cypress
It is designed for front endb. but we can also use for few api automation
It is open source
We can do end to end test using cypress

Cypress directly talks to browser.

Two component of cypress:
1. Test runner: This for install doing setup and also for writing test cases etc
2. Dashboard service: This is to run test, record test, having result of test etc


Important features of cypress:
1. Time traveller: This will have result of test in each time. We can check before and after of each step
2. Real time reload: If we modify the test/script, it will automatically rerun the test
3. Spies, stubs and clocks: This is used to modify the function, changing server responses, timing etc
4. Consistent result:As this directly talks to browser, the result will be consistent
5. Debugging: We can debug using debugging dev tools
6. Automatic waiting: Cypress internally has some intelligence to wait for page to load completely. There is no need of giving wait seperately
7. Network traffic control: This can be used to control the network calls. If need we can mock the api calls.
8. Screenshots and videos: It capture screenshot and videos during test run


Tutorial 2: Install and setup on windows
-----------------------------------------

1. Download nodejs for windows from internet(https://nodejs.org/en/download/) and install //It will install node js along with  npm
2. Add installed path as environment variable. Add NODE_HOME as variable name and path as value.  //Path of nodejs installation where node and npm file are available
If above step not works. Add path of nodejs (node and npm) in path
3.Verify by opening new command prompt and type below to check whether it picks environment variable or not
node --version           //To check whether node is working or not
or 
npm --version            //To check whether  npm is working or not
4. Go to any directly where you want to create the project
5. Create a folder with project name. Go inside that created folder
6. Give below command to create project and give details of project
npm init
7. To install cypress give below command
node install cypress --save-dev        //This will download and install cypress and This will also add cypress as dependency in project
8. Download and install IDE. Visual studio code editor is the popular ide for javascript project. So we can use that
9. Open Visual code editor. Open our project folder here



Tutorial 3: Install and setup on mac
-------------------------------------
1. Download nodejs for mac from internet(https://nodejs.org/en/download/) and install //It will install node js along with npm
2.Opem terminal and type below to check whether it works or not
node --vesion         //To check whether node is working or not
or 
npm --version            //To check whether  npm is working or not
3. Go to any directly where you want to create the project
4. Create a folder with project name. Go inside that created folder
5. Give below command to create project and give details of project
npm init
6. To install cypress give below command
node install cypress --save-dev        //This will download and install cypress and This will also add cypress as dependency in project
7. Download and install IDE. Visual studio code editor is the popular ide for javascript project. So we can use that
8. Open Visual code editor. Open our project folder here



Tutorial 4: Test runner component in cypress
--------------------------------------------
Test runner is used for executing test
Test runner will be available inside project if we already install cypress using command "npm install cypress --save-dev"
All cypress related command will be available under node_modules/.bin/ folder 
Go to created project and Use below command to open Test runner of cypress. First time it will take time
.\node_modules\.bin\cypress open         //For windows
or
./node_modules/.bin/cypress open          //For linux or mac

In root of the project, it will have cypress folder. This is the default frame work
All example tests will be available inside cypress/integration folder. 
It will be shown in Test runner.
We can just click any test to run the test.
After clicking it will launch chrome browser and run the test.
We can add our test inside integration.
After adding our test inside integration, Test runner will automatically show our test in Test runner.


Tutorial 5: Writing first test case in cypress
---------------------------------------------
Below is the structure to write test suite and test case.      //Below is mocha frame work model

describe('Test suite name', function(){   //describe is used to create test suite. It will take 2 arugment. suite name as first and second arugment is function (function which has tests)
 it('test 1 name', function(){           //it is used to create test case. It will take 2 arguments. test case name and function (function which has steps)
	//give steps here
 })
 
 it('test 12 name', function(){
	//give steps here
 })
 
 // we can have  multiple tests
})


Example:
describe('Flipkart', function(){ //This is to create suite. It takes suite name and function
  it('Launch flipkart and verify title', function(){ //This is to create suite. It takes test name and function
    cy.visit('https://flipkart.com') //This is to open this url in browser
    cy.title().should('eq', 'Online Shopping Site for Mobiles, Electronics, Furniture, Grocery, Lifestyle, Books & More. Best Offers!') //cy.title() to get title of current webpage. should() is the assertion. 'eq' means equal to. then we are giving expected
  })
  it('This test is created for failing', function(){
    cy.visit('https://flipkart.com')
    cy.title().should('eq', 'my title')
  })
})


 

---

cy.visit('give Url here')                 //This is to open url in browser
Eg:
cy.visit('https://flipkart.com')

cy.title().should('eq', 'give expected title here') //cy.title() is to get title of current web page. should() is the assertion. 'eq' inside to check equalto. then we are giving expected in next argument
Eg: 
cy.title().should('eq', 'Flipkart')



---

Tutorial 6: To run test in Test runner, command line or terminal
-----------------------------------------------------------

.\node_modules\.bin\cypress open                     //To open cypress test runner in windows
or
./node_modules/.bin/cypress open                    //To open cypress test runner


//In test runner, it top right corner we can select browser


.\node_modules\.bin\cypress run             //To run all test in electron browser. It will run in headless mode. It wont run directly in browser. 
or
./node_modules/.bin/cypress run             //To run all test in electron browser. It will run in headless mode.It wont run directly in browser. 


.\node_modules\.bin\cypress run --headed    //To run all test. by default it will run in electron browser. It will run in headed mode. It will directly run in browser
or
./node_modules/.bin/cypress run --headed    //To run all tes. By default it will run in electron browser. It will run in headed mode. It will directly run in browser


.\node_modules\.bin\cypress run --browser chrome   //To run all test in chrome browser. 
or
./node_modules/.bin/cypress run --browser chrome    //To run all test in chrome browser.  


.\node_modules\.bin\cypress run --spec "cypress/integration/examples/mysampletest.js"   //To run specific test class 
or
./node_modules/.bin/cypress run --spec "cypress/integration/examples/mysampletest.js"    //To run specific test class 


---


Tutorial 7: Cypress project folder stucture
-------------------------------------------
cypress/fixtures      - This should have all test data
cypress/integration   - We need to write test inside this. Mostly inside cypress/integration/examples folder
cypress/plugins       - This for event listener. Based on test pass/fail, we do action. It is simular to Listener class in java
cypress/screenshots   - This will store screenshots of failed tests
cypress/support       - Here we should have all reusable code/script
cypress/videos        - This will store video of the test
node_modules          - This will contain node module of cypress, mocha etc
cypress.json          - This is to change configuration. This is to override some default configuration. We can see configuration in Test runner -> settings -> Configurations
package-lock.json     - Dont touch this file
package.json          - This is to add dependencies etc

---

Tutorial 8: Locators in cypress / CSS selector
-------------------------------

cypress only support CSS selector for locating the element

.classname    //This is to give class name in css selector
Eg: .myinput

#id           //This is to give id in css selector
Eg: #myid

[attributename = value]   //This is to give attribute and value in css selector
Eg: [type='submit']

.classname[attributename = value]   //This is combination of class name with value
Eg: .mypen[type = 'text']


Below link, end of the page helps to write different css selector:
https://www.w3schools.com/css/css_selectors.asp
https://www.w3schools.com/css/css_combinators.asp
https://www.w3schools.com/css/css_pseudo_classes.asp
https://www.w3schools.com/css/css_pseudo_elements.asp
https://www.w3schools.com/css/css_attribute_selectors.asp



Different way to get CSS selector:
1. Inspect the element in browser, and copy selector: Eg: Right click -> inspect -> using arrow hover and select -> right click -> copy -> copy selector
2. ChroPath extension helps to get css selector of an element Eg: When inspect -> select the element -> righ inspect, in right side >> we can see chropath -> click and copy cssSelector
3. Test runner also helps to get css selector of an element. Eg: Open test runner. Run the test which will launch the page -> left side next to url, click icon (open selector playground icon) -> Then click any element. it will give css selector inside cy.get





cy.get('give css selector here')          //This is to elemet/elements of matching selector


----


Tutorial 9: Locators in cypress example
-------------------------------

///<reference types="cypress" />  //This is to show

describe('Meesho', function(){
  it('Search the product and add to cart and verify', function(){

    cy.visit('https://meesho.com') //Go to this url

    cy.get('.search-input-elm').type('Shoe').type('{enter}') //Search Shoe

    cy.wait(5000)  //waiting for 5 sec

    cy.get('#__next > div.sc-bdvvtL.ProductListingSearchDesktop__ContainerStyled-sc-7ofwvj-1.byHcNc.gzSScG > div > div.sc-bdvvtL.ProductList__PLPContainer-sc-8lnc8o-1.byHcNc.eVzmpH > div > div:nth-child(2) > a > div > div.Card__BaseCard-sc-b3n78k-0.dUNFgg.NewProductCard__DetailCard_Desktop-sc-j0e7tu-2.fqvaeS.NewProductCard__DetailCard_Desktop-sc-j0e7tu-2.fqvaeS > p').click() //Clicking one of the shoe

    cy.get('#__next > div.sc-bdvvtL.Pagestyled__ContainerStyled-sc-ynkej6-0.byHcNc.eVBxUC > div > div.sc-dkPtRN.kfnIzE > div:nth-child(2) > div > div > span:nth-child(3) > span').click() //click on size

    cy.get('#__next > div.sc-bdvvtL.Pagestyled__ContainerStyled-sc-ynkej6-0.byHcNc.eVBxUC > div > div.sc-dkPtRN.kfnIzE > div.Card__BaseCard-sc-b3n78k-0.irlVhK.ShippingInfo__DetailCard-sc-dflqn4-0.cYnJAT.ShippingInfo__DetailCard-sc-dflqn4-0.cYnJAT > div.Card__BaseCard-sc-b3n78k-0.ftaSSh.ShippingInfo__PriceRow-sc-dflqn4-2.TEOer.ShippingInfo__PriceRow-sc-dflqn4-2.TEOer > h4').contains('398') //Validate price

    cy.get('.caYqEj').click() //Click add cart

    cy.get('[placeholder="Try Saree, Kurti or Search by Product Code"]>input').type('hey hey') //Type in search

    cy.wait(5000) //Waiting for 5 sec

    cy.get('[placeholder="Try Saree, Kurti or Search by Product Code"]>input').clear()  //Clear the search

  })

})


---



Tutorial 10: UI elements: Input box and radio button, verifying visibility, enabling, checked or not etc, title(), url() 
------------------------------------------------------------------------------------
cy.title()  //To get title
cy.url()   //To get url
.type('text to be typed')  //to type the text
.click()  //To click
.should()   //Assertion for validation
.should('eq', 'expected value')
.should('have.text', 'expected text')
.should('include', 'partial text')
.should('be.visible')  //To validate visibility
.should('be.enabled')  //To validate whether enabled or not
.should('be.checked')  //To validate whether it is checked or not
.should('not.be.checked')  //To validate whether it is not checked
Still more are there

Eg: 

/// <reference types="cypress" />

describe('UI elements', function(){
  it('Validating UI elements', function(){
    cy.visit('https://demo.guru99.com/test/newtours/') //To go to webpage
    cy.title().should('eq', 'Welcome: Mercury Tours') //To validate title.
    cy.get('input[name=userName]').should('be.visible').should('be.enabled').type('mercury') //To check whether input  field is visible and enabled or not. then typed user name
    cy.get('input[name=password]').should('be.visible').should('be.enabled').type('mercury') //To check whether input password field is visible and enabled or not. then typed password
    cy.get('input[name="submit"]').should('be.visible').should('be.enabled').click() //clicked submit button
    cy.get('h3').should('have.text', 'Login Successfully') //To validate the text after login
    cy.url().should('include', 'login_sucess') //To check the  url after login
    cy.get('a[href="reservation.php"]').click() //To click on the option
    cy.title().should('eq', 'Find a Flight: Mercury Tours:') //To check the title
    cy.get('input[value="roundtrip"]').should('be.visible').should('be.checked') //To check the radio button is visible and checked or not
    cy.get('input[value="oneway"]').should('be.visible').should('not.be.checked').click() //To check the radio button is enabled and not checked. then checked by clicking
    cy.get('input[value="oneway"]').should('be.visible').should('be.checked') //Then validating after checked
    cy.get('input[value="roundtrip"]').should('be.visible').should('not.be.checked') //Validating other value. it should uncheck
    cy.get('input[name="findFlights"]').should('be.visible').should('be.enabled').click() //Click button

  })
})

-------

Tutorial 11: UI elements: checkbox, different dropdown etc
-----------------------------------------------

.check()       //To check the element
.uncheck()     //To uncheck
.check(['value1', 'value2'])  //To check multiple values
.and('have.value', 'expected value')

.should('be.checked')  //To assert checked or not
.should('not.be.checked')  //To assert whether it is not checked or not

.select('value') //To select values in drop down
.contains('Danish')  //To fetch one values in list of element
.click({force:true})   //To click forcefully
.type('give text here') //To add text
.type('{enter}')   //To enter key in keyboard

Example:
describe('Check box and drop down', function(){
  it('check box validation', function(){
    cy.visit('http://demo.automationtesting.in/Register.html')
    cy.get('#checkbox1').check().should('be.checked').and('have.value', 'Cricket') //To check use check()
    cy.get('#checkbox2').check().should('be.checked').and('have.value', 'Movies') //To validate multiple in should use add, to get values use have.value
    cy.get('#checkbox3').check().should('be.checked').and('have.value', 'Hockey')

    cy.get('#checkbox1').uncheck().should('not.be.checked') //to uncheck use uncheck()
    cy.get('#checkbox2').uncheck().should('not.be.checked')//Use not in should by adding not
    cy.get('#checkbox3').uncheck().should('not.be.checked')

    cy.get('input[type=checkbox]').check(['Cricket', 'Hockey'])  //This is to select multiple check bock
  })

  it('Normal select drop down', function(){
    cy.get('#Skills').select('Art Design').should('have.value', 'Art Design') //To select value from normal select. use select
  })

  it('Clicking multiple drop down one by one in the list', function(){
    cy.get('#msdd').click()                              //To check on input field which has different drop down
    cy.get('.ui-corner-all').contains('Danish').click()  //Clicking on values one by one
    cy.get('.ui-corner-all').contains('English').click()
    cy.get('.ui-corner-all').contains('Thai').click()
  })

  it('Type matching value in drop down and then select suggested one', function(){
      //cy.get('.control-label').contains('Languages').click()
      //cy.get('span[role="combobox"]').click()
      cy.get('span[role="combobox"]').click({force:true})   //This is to forcefully clicking. use {force: true}
      cy.get('.select2-search__field').type('Ind')  //type is used to type text
      cy.get('.select2-search__field').type('{enter}')  //This is to press enter key in keyboard. used {enter}
  })

})

-----

Tutorial 12: UI elements: Handing alert
----------------------------------------
By default cypress will handle the alert message
It will close the alert window. Mostly we cannot change that behaviour.

If need we can capture the message of alert and validate the message

Two types of alerts are there
1. Normal alert. Alert with only one button. Ok button
2. Confirmation alert. Alert with two button. Ok and cancel button


To get alert message:

cy.on('window:alert', function(message) {})         //To get normal alert
cy.on('window:confirm', function(message) {})         //To get confirmation alert

Example:

/// <reference types="cypress" />

describe('Alert Handling', function(){
  it('Handling normal alert', function(){
    cy.visit('/cypress/downloads/alert.html')
    cy.get('button').click()
    cy.on('window:alert', (message) => {  //To get normal alert message use window:alert
      expect(message).to.equal('this is my alert') //Validating message
    })
  })

  it('Handling confirmation alert', function(){
    cy.visit('http://testautomationpractice.blogspot.com')
    cy.get('#HTML9 > div.widget-content > button').click()
    cy.on('window:confirm', (message) => {  //To get confirmation alert message use window:confirm
      expect(message).to.equal('Press a button!') //validating message
    })
  })
})


---








----


OtherNotes:
----------
----------
There are two framework available for cypress. They are jasmine and mocha
By default cypress is coming with mocha

cy  //is the global object of cypress

